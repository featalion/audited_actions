= AuditedActions

Rails plugin (based on v3.2) to audit user actions.
It sends users' actions to IronMQ first and then process it with IronWorker.
For now only Mongoid ORM is supported.

This gem is still in development. Some features are not realized.

== Installation

1. Add to Gemfile

     gem 'audited_actions', git: 'git://github.com/featalion/audited_actions.git'


2. Configure AuditedActions, place the code bellow at +config/initializers/audition_actions.rb+

     module AuditedActions
       class Engine < Rails::Engine

         config.token = 'IRON_IO_TOKEN'
         config.project_id = 'IRON_IO_PROJECT_ID'
         config.queue_name = 'audited_actions'

         config.access_restriction_callback = nil
         config.current_user = :current_user
         config.known_models = Mongoid::Document # ancestors class (or list of classes)

         config.mongo = Rails.application.config.mongo # Hash to configure mongoid
       end
     end


3. Mount engine to your application, add to +config/routes.rb+

     mount AuditedActions::Engine, at: 'audited_actions' # , as: 'my_cool_name'


4. Add to controllers which actions may be audited

     audited_actions [:view, :download], associate: {content: :container}

     def view
       @container = VideoContainer.find(params['id'])
     end

     ...


5. Install worker

     rake audited_actions:install_worker


6. Write your own view (and layout) if you want.
   Place view at <tt>app/views/audited_actions/audited_actions/index.html.[erb|haml]</tt>
   and layout at <tt>app/layouts/audited_actions/application.html.[erb|haml]</tt>.

   If you want to adapt your own app layout use routes with engine name:

     main_app.root_path
     audited_actions.audited_actions_path

   Engine's controller is provided next instance variables in the view, supports pagination:

     @entries # => Array[AuditedActionsLogEntry, ...] - set of the log entries from the DB
     @total_entries # => Integer
     @page # => Integer
     @per_page # => Integer
     @total_pages # => Integer

   Accepted parameters for GET on `audited_actions`:

   * +page+ - page number to show, default is 1
   * +per_page+ - entities per page, default is 10

   You can launch worker from your app. Use POST to `audited_actions` with no parameters to queue worker and launch ASAP.

     <%= button_to 'Launch AuditedActions worker now!', {action: :create, method: :post}, class: 'btn' %>

   To schedule new worker PUT to `audited_actions`

   * +interval+ - run interval in minutes

   <b>Be carefull</b>: when you schedule new worker plugin cancels others under project you're using at iron.io.

     <%= form_tag(audited_actions.audited_action_path('1'), method: :put) do %>
       <%= submit_tag "Schedule AuditedActions worker!", class: 'btn' %>
       <%= select_tag :interval, options_for_select([['every 30 min', '30'], ['every hour', '60'],
                                                     ['every 2 hours', '120'], ['every 4 hours', '240']]) %>
     <% end %>


== TODO

1. Add functional tests.

2. Add schedule configuration feature which could be built-in to the main app.

This project rocks and uses MIT-LICENSE (-:
